#!/bin/bash
# This file is not generated by autoconf
# Please do not try to modify this file

CONF_SHELL_BASH(){
	echo -n 'Checking current Shell ... '
	SH=$(echo $SHELL|sed -rne 's@.*/@@p')
	echo $SH
	if [ "x$SH" = "xbash" ];then
		return 0
	else
		echo "Please use bash to configure"
		echo "Please run following command and relogin:"
		echo "chsh -s /bin/bash $USER"
		exit 1
	fi
}

CONF_SH_BASH(){
	echo -n 'Checking sh Shell ... '
	SH=$(readlink -f /bin/sh|sed -rne 's@.*/@@p')
	echo $SH
	if [ "x$SH" = "xbash" ];then
		return 0
	else
		echo "Please use bash as sh"
		echo "Please run following command with root and select No:"
		echo "dpkg-reconfigure $SH"
		exit 1
	fi
}

CONF_YACC(){
	echo -n 'Checking yacc ... '
	YACC="/usr/bin/yacc"
	if [ -f $YACC ];then
		echo $YACC
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install bison -y"
		exit 1
	fi
}

CONF_YACC_BISON(){
	echo -n 'Checking yacc is something bison ... '
	YACC="/usr/bin/yacc"
	BISON_YACC=$(readlink -f $YACC|sed -rne 's@.*/@@p')
	echo $BISON_YACC|grep bison > /dev/null
	BISON=$?
	if [ $BISON -eq 0 ];then
		echo yes
		return 0
	else
		cat $YACC |grep bison > /dev/null
		BISON=$?
		if [ $BISON -eq 0 ];then
			echo yes
			return 0
		else
			echo no
			echo "Please run following command with root:"
			echo "apt install bison -y"
			exit 1
		fi
	fi
}

CONF_AWK(){
	echo -n 'Checking awk ... '
	AWK="/usr/bin/awk"
	if [ -f $AWK ];then
		echo $AWK
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install gawk -y"
		exit 1
	fi
}

CONF_AWK_GAWK(){
	echo -n 'Checking awk is something gawk ... '
	AWK="/usr/bin/awk"
	GAWK_AWK=$(readlink -f $AWK|sed -rne 's@.*/@@p')
	echo $GAWK_AWK|grep gawk > /dev/null
	GAWK=$?
	if [ $GAWK -eq 0 ];then
		echo yes
		return 0
	else
		cat $AWK |grep bison > /dev/null
		GAWK=$?
		if [ $GAWK -eq 0 ];then
			echo yes
			return 0
		else
			echo no
			echo "Please run following command with root:"
			echo "apt install gawk -y"
			exit 1
		fi
	fi
}

CONF_LOG(){
	echo -n "Creating config.detail ... "
	./version-check.sh > config.detail
	./library-check.sh >> config.detail
	echo done
}

CONF_MAKEINFO(){
	echo -n 'Checking makeinfo ... '
	MAKEINFO="/usr/bin/makeinfo"
	if [ -f $MAKEINFO ];then
		echo $MAKEINFO
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install texinfo -y"
		exit 1
	fi
}

CONF_PERL(){
	echo -n 'Checking perl ... '
	perl="/usr/bin/perl"
	if [ -f $perl ];then
		echo $perl
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install perl-base -y"
		exit 1
	fi
}

CONF_PATCH(){
	echo -n 'Checking patch ... '
	patch="/usr/bin/patch"
	if [ -f $patch ];then
		echo $patch
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install patch -y"
		exit 1
	fi
}

CONF_MAKE(){
	echo -n 'Checking make ... '
	make="/usr/bin/make"
	if [ -f $make ];then
		echo $make
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install make -y"
		exit 1
	fi
}

CONF_M4(){
	echo -n 'Checking m4 ... '
	m4="/usr/bin/m4"
	if [ -f $m4 ];then
		echo $m4
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install m4 -y"
		exit 1
	fi
}

CONF_LDD(){
	echo -n 'Checking ldd ... '
	ldd="/usr/bin/ldd"
	if [ -f $ldd ];then
		echo $ldd
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install libc-bin -y"
		exit 1
	fi
}

CONF_C_COMPILE(){
	CCC=$1
	CC=$(readlink -f $CCC|sed -rne 's@.*/@@p')
	echo -n "Checking $CC works ... "
	cat > c.c <<EOF
	int main(){return 0;}
EOF
	$CC c.c 2>/dev/null
	if [ -f a.out ];then
		echo "yes"
	else
		echo "no"
		exit 1
	fi
	rm a.out
	rm c.c
}

CONF_GCC(){
	echo -n 'Checking gcc ... '
	gcc="/usr/bin/gcc"
	if [ -f $gcc ];then
		echo $gcc
		CONF_C_COMPILE $gcc
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install gcc -y"
		exit 1
	fi
}

CONF_GXX(){
	echo -n 'Checking g++ ... '
	gxx="/usr/bin/g++"
	if [ -f $gxx ];then
		echo $gxx
		CONF_C_COMPILE $gxx
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install g++ -y"
		exit 1
	fi

}

CONF_LIBGCC(){
	LIBGMP="/usr/lib/libgmp.la"
	LIBMPFR="/usr/lib/libmpfr.la"
	LIBMPC="/usr/lib/libmpc.la"
	GMP=0
	MPFR=0
	MPC=0
	echo -n "Checking libgmp.la 32bit Library ... "	
	if [ -f $LIBGMP ];then
		echo $LIBGMP
	else
		echo "not found"
		GMP=1
	fi
	echo -n "Checking libmpfr.la 32bit Library ... "	
	if [ -f $LIBMPFR ];then
		echo $LIBMPFR
	else
		echo "not found"
		MPFR=1
	fi
	echo -n "Checking libmpc.la 32bit Library ... "	
	if [ -f $LIBMPC ];then
		echo $LIBMPC
	else
		echo "not found"
		MPC=1
	fi
	if [ $MPC -eq 0 ] && [ $MPFR -eq 0 ] && [ $GMP -eq 0 ];then
		return 0
	elif [ $MPC -eq 1 ] && [ $MPFR -eq 1 ] && [ $GMP -eq 1 ];then
		return 0
	else
		echo "libgmp, libmpc and libmpfr must be all present or all non-exists"
		echo "please run following command to install all or remove all:"
		echo "install) apt install libgmp-dev libmpfr-dev libmpc-dev -y"
		echo "remove)  apt purge libgmp-dev libmpfr-dev libmpc-dev -y"
		exit 1
	fi
}

CONF_LIBGCC64(){
	LIBGMP="/usr/lib64/libgmp.la"
	LIBMPFR="/usr/lib64/libmpfr.la"
	LIBMPC="/usr/lib64/libmpc.la"
	GMP=0
	MPFR=0
	MPC=0
	echo -n "Checking libgmp.la 64bit Library ... "	
	if [ -f $LIBGMP ];then
		echo $LIBGMP
	else
		echo "not found"
		GMP=1
	fi
	echo -n "Checking libmpfr.la 64bit Library ... "	
	if [ -f $LIBMPFR ];then
		echo $LIBMPFR
	else
		echo "not found"
		MPFR=1
	fi
	echo -n "Checking libmpc.la 64bit Library ... "	
	if [ -f $LIBMPC ];then
		echo $LIBMPC
	else
		echo "not found"
		MPC=1
	fi
	if [ $MPC -eq 0 ] && [ $MPFR -eq 0 ] && [ $GMP -eq 0 ];then
		return 0
	elif [ $MPC -eq 1 ] && [ $MPFR -eq 1 ] && [ $GMP -eq 1 ];then
		return 0
	else
		echo "libgmp, libmpc and libmpfr must be all present or all non-exists"
		echo "please run following command to install all or remove all:"
		echo "install) apt install libgmp-dev libmpfr-dev libmpc-dev -y"
		echo "remove)  apt purge libgmp-dev libmpfr-dev libmpc-dev -y"
		exit 1
	fi
}

CONF_ROOT(){
	echo -n "Checking current user is root ... "
	U=$(whoami)
	if [ "$U" = "root" ];then
		echo yes
		if [ $FORCE_UNSAFE_CONFIGURE ] && [ $FORCE_UNSAFE_CONFIGURE -eq 1 ];then
			return 0
		else
			echo "Root User is not recommended, if you want to do so"
			echo "Please run following command and retry:"
			echo "export FORCE_UNSAFE_CONFIGURE=1"
			exit 1
		fi
	else
		echo no
		return 0
	fi
}

CONF_DEBIAN(){
	DEBIAN=0
	UBUNTU=0
	KALI=0
	KS=0
	DEEPIN=0
	
	echo -n "Checking OS Type ... "
	OSTYPE=$(cat /etc/issue|sed -rne "s/ .*//p")
	echo $OSTYPE
	case $OSTYPE in
		Ubuntu)
			UBUNTU=1
			;;
		Debian)
			DEBIAN=1
			;;
		Kali)
			KALI=1
			;;
		Deepin)
			DEEPIN=1
			;;
		KSLinux|Kurosawa)
			KS=1
			;;
		*)			
			if [ $FORCE_NO_DEB_KPM_SYSTEM ] && [ $FORCE_NO_DEB_KPM_SYSTEM -eq 1 ];then
				return 0
			else
				echo "KSLinux can only build on deb-based systems or"
				echo "kpm-based systems,you can run following command"
				echo "to skip this check:"
				echo "export FORCE_NO_DEB_KPM_SYSTEM=1"
				exit 1
			fi
			;;			
	esac
	return 0
}

CONF_KPM(){
	echo -n 'Checking Package Manager ... '
	KPM="/usr/bin/kpm"
	DPKG="/usr/bin/dpkg"
	if [ -f $KPM ];then
		echo $KPM
		return 0
	elif [ -f $DPKG ];then
		echo $DPKG
		return 0
	else
		echo "not found"
		if [ $NO_PACKAGE_MANAGER ] && [ $NO_PACKAGE_MANAGER -eq 1 ];then
				return 0
		else
			echo "Please install Package Manager (dpkg) or (kpm) manually"
			echo "or run following command to skip this check:"
			echo "export NO_PACKAGE_MANAGER=1"
			exit 1
		fi
	fi
}

CONF_DEBIAN
CONF_ROOT
CONF_SHELL_BASH
CONF_SH_BASH
CONF_KPM
CONF_YACC
CONF_YACC_BISON
CONF_AWK
CONF_AWK_GAWK
CONF_MAKEINFO
CONF_PERL
CONF_PATCH
CONF_MAKE
CONF_M4
CONF_LDD
CONF_GCC
CONF_GXX
CONF_LIBGCC
CONF_LIBGCC64
#CONF_LOG


