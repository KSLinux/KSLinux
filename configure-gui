#!/bin/bash
# This file is not generated by autoconf
# Please do not try to modify this file

export TITLE='Kurosawa Linux (ruby) Build Tool'
export THIS='Configure Build Environment'
export ALL=23
export OK=0

SHOW_INFOMSG(){
	if [ -f /usr/bin/dialog ];then
		dialog --backtitle "$TITLE" --no-ok --no-cancel --title "$THIS" --infobox "$1" 0 0 2>/dev/null
	else
		echo "$1"
	fi
}

SHOW_MSG(){
	if [ -f /usr/bin/dialog ];then
		dialog --backtitle "$TITLE" --title "$THIS" --msgbox "$1" 0 0 2>/dev/null
	else
		echo "$1"
	fi
}

SHOW_PROGRESS(){
	if [ -f /usr/bin/dialog ];then
		echo $[$OK/$ALL] | dialog --backtitle "$TITLE" --title "$THIS" --gauge "$1" 0 0 2>/dev/null
		sleep 1
	else
		echo "$1"
	fi
}

SHOW_MIXPROGRESS(){
	if [ -f /usr/bin/dialog ];then
		dialog --backtitle "$TITLE" --title "$THIS" --mixedgauge "" 0 0 "$[$OK/$ALL]" "$1" "$2" "$3" "$4" "$5" "$6" 2>/dev/null
		sleep 1
	else
		echo "$1"
	fi
}

CONF_SHELL_BASH(){
	msg='Checking current Shell ... '
	SHOW_PROGRESS "$msg"
	SH=$(echo $SHELL|sed -rne 's@.*/@@p')
	SHOW_PROGRESS "$msg$SH"
	if [ "x$SH" = "xbash" ];then
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg$SH"
		return 0
	else
		err(){
			echo "Please use bash to configure"
			echo "Please run following command and relogin:"
			echo "chsh -s /bin/bash $USER"
		}
		msg=$(err)
		SHOW_MSG $msg
		exit 1
	fi
}

CONF_SH_BASH(){
	msg='Checking sh Shell ... '
	SHOW_PROGRESS "$msg"
	SH=$(readlink -f /bin/sh|sed -rne 's@.*/@@p')
	msg=$msg$SH
	if [ "x$SH" = "xbash" ];then
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){		
		echo "Please use bash as sh"				
		if [ "$OPM" = "yum" ] || [ "$OPM" = "zypper" ];then
			echo "Please run following command with root:"
			echo "rm -rf /bin/sh && ln -s /bin/bash /bin/sh"
		else
			echo "Please run following command with root and select No:"
			echo "$OPM-reconfigure $SH"
		fi
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_YACC(){
	msg='Checking yacc ... '
	SHOW_PROGRESS "$msg"
	YACC="/usr/bin/yacc"
	if [ -f $YACC ];then
		msg=$msg$YACC
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "yacc not found"
		echo "Please run following command with root:"
		echo "$OPM install bison -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_YACC_BISON(){
	msg='Checking yacc is something bison ... '
	SHOW_PROGRESS "$msg"
	YACC="/usr/bin/yacc"
	BISON_YACC=$(readlink -f $YACC|sed -rne 's@.*/@@p')
	echo $BISON_YACC|grep bison > /dev/null
	BISON=$?
	if [ $BISON -eq 0 ];then
		msg=${msg}yes
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		cat $YACC |grep bison > /dev/null
		BISON=$?
		if [ $BISON -eq 0 ];then
			echo yes
			return 0
		else
			err(){
			echo "yacc not bison"
			echo "Please run following command with root:"
			echo "$OPM install bison -y" 
			}
			msg=$(err)
			SHOW_MSG "$msg"
			exit 1
		fi
	fi
}

CONF_AWK(){
	msg='Checking awk ... '
	SHOW_PROGRESS "$msg"
	AWK="/usr/bin/awk"
	if [ -f $AWK ];then
		msg=$msg$AWK
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "awk not found"
		echo "Please run following command with root:"
		echo "$OPM install gawk -y" 
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_AWK_GAWK(){
	msg='Checking awk is something gawk ... '
	SHOW_PROGRESS "$msg"
	AWK="/usr/bin/awk"
	GAWK_AWK=$(readlink -f $AWK|sed -rne 's@.*/@@p')
	echo $GAWK_AWK|grep gawk > /dev/null
	GAWK=$?
	if [ $GAWK -eq 0 ];then
		msg=${msg}yes
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		cat $AWK |grep bison > /dev/null
		GAWK=$?
		if [ $GAWK -eq 0 ];then
			msg=${msg}yes
			OK=$[$OK+100]
			SHOW_PROGRESS "$msg"
			return 0
		else
			err(){
			echo "awk not gawk"
			echo "Please run following command with root:"
			echo "$OPM install gawk -y" 
			}
			msg=$(err)
			SHOW_MSG "$msg"
			exit 1
		fi
	fi
}

CONF_MAKEINFO(){
	msg='Checking makeinfo ... '
	SHOW_PROGRESS "$msg"
	MAKEINFO="/usr/bin/makeinfo"
	if [ -f $MAKEINFO ];then
		msg=$msg$MAKEINFO
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "makeinfo not found"
		echo "Please run following command with root:"
		echo "$OPM install texinfo -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_PERL(){
	msg='Checking perl ... '
	SHOW_PROGRESS "$msg"
	perl="/usr/bin/perl"
	if [ -f $perl ];then
		msg=$msg$perl
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "perl not found"
		echo "Please run following command with root:"
		echo "$OPM install perl-base -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_PATCH(){
	msg='Checking patch ... '
	SHOW_PROGRESS "$msg"
	patch="/usr/bin/patch"
	if [ -f $patch ];then
		msg=$msg$patch
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "patch not found"
		echo "Please run following command with root:"
		echo "$OPM install patch -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_MAKE(){
	msg='Checking make ... '
	SHOW_PROGRESS "$msg"
	make="/usr/bin/make"
	if [ -f $make ];then
		msg=$msg$make
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "make not found"
		echo "Please run following command with root:"
		echo "$OPM install make -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_M4(){
	msg='Checking m4 ... '
	SHOW_PROGRESS "$msg"
	m4="/usr/bin/m4"
	if [ -f $m4 ];then
		msg=$msg$m4
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "m4 not found"
		echo "Please run following command with root:"
		echo "$OPM install m4 -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_LDD(){
	msg='Checking ldd ... '
	SHOW_PROGRESS "$msg"
	ldd="/usr/bin/ldd"
	if [ -f $ldd ];then
		msg=$msg$ldd
		OK=$[$OK+100]
		SHOW_PROGRESS "$msg"
		return 0
	else
		err(){
		echo "ldd not found"
		echo "Please run following command with root:"
		if [ "$OPM" = "yum" ] || [ "$OPM" = "zypper" ];then
			echo "$OPM install glibc-devel -y"
		else
			echo "$OPM install libc-bin -y"
		fi
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_C_COMPILE(){
	CCC=$1
	CC=$(readlink -f $CCC|sed -rne 's@.*/@@p')
	msg="Checking $CC works ... "
	SHOW_MIXPROGRESS "$m" "$x" "$msg" 7
	cat > c.c <<EOF
	int main(){return 0;}
EOF
	$CC c.c 2>/dev/null
	if [ -f a.out ];then
		OK=$[$OK+50]
		SHOW_MIXPROGRESS "$m" "$x" "$msg" 0
	else
		SHOW_MIXPROGRESS "$m" "$x" "$msg" 10
		exit 1
	fi
	rm a.out
	rm c.c
}

CONF_GCC(){
	export m='Checking gcc ... '
	export x=7
	SHOW_MIXPROGRESS "$m" "$x"
	gcc="/usr/bin/gcc"
	if [ -f $gcc ];then
		x=0
		m=$m$gcc
		OK=$[$OK+50]
		SHOW_MIXPROGRESS "$m" "$x"
		CONF_C_COMPILE $gcc
		return 0
	else
		err(){
		echo "gcc not found"
		echo "Please run following command with root:"
		echo "$OPM install gcc -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi
}

CONF_GXX(){
	export m='Checking g++ ... '
	export x=7
	SHOW_MIXPROGRESS "$m" "$x"
	gxx="/usr/bin/g++"
	if [ -f $gxx ];then
		x=0
		m=$m$gcc
		OK=$[$OK+50]
		SHOW_MIXPROGRESS "$m" "$x"
		CONF_C_COMPILE $gxx
	else
		err(){
		echo "g++ not found"
		echo "Please run following command with root:"
		echo "$OPM install g++ -y"
		}
		msg=$(err)
		SHOW_MSG "$msg"
		exit 1
	fi

}

CONF_LIBGCC(){
	LIBGMP="/usr/lib/libgmp.la"
	LIBMPFR="/usr/lib/libmpfr.la"
	LIBMPC="/usr/lib/libmpc.la"
	GMP=0
	MPFR=0
	MPC=0
	echo -n "Checking libgmp.la 32bit Library ... "	
	if [ -f $LIBGMP ];then
		echo $LIBGMP
	else
		echo "not found"
		GMP=1
	fi
	echo -n "Checking libmpfr.la 32bit Library ... "	
	if [ -f $LIBMPFR ];then
		echo $LIBMPFR
	else
		echo "not found"
		MPFR=1
	fi
	echo -n "Checking libmpc.la 32bit Library ... "	
	if [ -f $LIBMPC ];then
		echo $LIBMPC
	else
		echo "not found"
		MPC=1
	fi
	if [ $MPC -eq 0 ] && [ $MPFR -eq 0 ] && [ $GMP -eq 0 ];then
		return 0
	elif [ $MPC -eq 1 ] && [ $MPFR -eq 1 ] && [ $GMP -eq 1 ];then
		return 0
	else
		echo "libgmp, libmpc and libmpfr must be all present or all non-exists"
		echo "please run following command to install all or remove all:"
		if [ "$OPM" = "yum" ] || [ "$OPM" = "zypper" ];then
			echo "install) $OPM install gmp-devel mpfr-devel mpc-devel -y"
			echo "remove)  $OPM erase gmp-devel mpfr-devel mpc-devel -y"
		else
			echo "install) $OPM install libgmp-dev libmpfr-dev libmpc-dev -y"
			echo "remove)  $OPM purge libgmp-dev libmpfr-dev libmpc-dev -y"
		fi
		exit 1
	fi
}

CONF_LIBGCC64(){
	LIBGMP="/usr/lib64/libgmp.la"
	LIBMPFR="/usr/lib64/libmpfr.la"
	LIBMPC="/usr/lib64/libmpc.la"
	GMP=0
	MPFR=0
	MPC=0
	echo -n "Checking libgmp.la 64bit Library ... "	
	if [ -f $LIBGMP ];then
		echo $LIBGMP
	else
		echo "not found"
		GMP=1
	fi
	echo -n "Checking libmpfr.la 64bit Library ... "	
	if [ -f $LIBMPFR ];then
		echo $LIBMPFR
	else
		echo "not found"
		MPFR=1
	fi
	echo -n "Checking libmpc.la 64bit Library ... "	
	if [ -f $LIBMPC ];then
		echo $LIBMPC
	else
		echo "not found"
		MPC=1
	fi
	if [ $MPC -eq 0 ] && [ $MPFR -eq 0 ] && [ $GMP -eq 0 ];then
		return 0
	elif [ $MPC -eq 1 ] && [ $MPFR -eq 1 ] && [ $GMP -eq 1 ];then
		return 0
	else
		echo "libgmp, libmpc and libmpfr must be all present or all non-exists"
		echo "please run following command to install all or remove all:"
		if [ "$OPM" = "yum" ] || [ "$OPM" = "zypper" ];then
			echo "install) $OPM install gmp-devel mpfr-devel mpc-devel -y"
			echo "remove)  $OPM erase gmp-devel mpfr-devel mpc-devel -y"
		else
			echo "install) $OPM install libgmp-dev libmpfr-dev libmpc-dev -y"
			echo "remove)  $OPM purge libgmp-dev libmpfr-dev libmpc-dev -y"
		fi
		exit 1
	fi
}

CONF_ROOT(){
	echo -n "Checking current user is root ... "
	U=$(whoami)
	if [ "$U" = "root" ];then
		echo yes
		if [ $FORCE_UNSAFE_CONFIGURE ] && [ $FORCE_UNSAFE_CONFIGURE -eq 1 ];then
			return 0
		else
			echo "Root User is not recommended, if you want to do so"
			echo "Please run following command and retry:"
			echo "export FORCE_UNSAFE_CONFIGURE=1"
			exit 1
		fi
	else
		echo no
		return 0
	fi
}

CONF_OS(){
	DEBIAN=0
	UBUNTU=0
	KALI=0
	KS=0
	DEEPIN=0
	OPM=empty
	RPM=0
	SUSE=0

	echo -n "Checking OS Type ... "
	OSTYPE=$(cat /etc/issue|sed -rne "s/ .*//p")
	if [ "$OSTYPE" = "Redhat" ] || [ "$OSTYPE" = "Red" ];then
		OSTYPE=RHEL
	fi
	echo $OSTYPE
	case $OSTYPE in
		Ubuntu)
			UBUNTU=1
			OPM=dpkg
			;;
		Debian)
			DEBIAN=1
			OPM=dpkg
			;;
		Kali)
			KALI=1
			OPM=dpkg
			;;
		Deepin)
			DEEPIN=1
			OPM=dpkg
			;;
		KSLinux|Kurosawa)
			KS=1
			OPM=kpm
			;;
		RHEL|Fedora|CentOS)
			RPM=1
			OPM=yum
			;;
		SUSE|openSUSE)
			SUSE=1
			OPM=zypper
			;;
		*)			
			if [ $UNSUPPORTED_SYSTEM ] && [ $UNSUPPORTED_SYSTEM -eq 1 ];then
				return 0
			else
				echo "KSLinux can only build on deb-based systems,"
				echo "kpm-based systems or yum-dnf-based systems,"
				echo "you can run following command to skip this check:"
				echo "export UNSUPPORTED_SYSTEM=1"
				exit 1
			fi
			;;			
	esac
	return 0
}

CONF_KPM(){
	echo -n 'Checking Package Manager ... '
	KPM="/usr/bin/kpm"
	DPKG="/usr/bin/dpkg"
	if [ -f $KPM ];then
		echo $KPM
		return 0
	elif [ -f $DPKG ];then
		echo $DPKG
		return 0
	else
		echo "not found"
		if [ $NO_PACKAGE_MANAGER ] && [ $NO_PACKAGE_MANAGER -eq 1 ];then
				return 0
		else
			echo "Please install Package Manager (dpkg) or (kpm) manually"
			echo "or run following command to skip this check:"
			echo "export NO_PACKAGE_MANAGER=1"
			exit 1
		fi
	fi
}

CONF_LANG(){
	echo -n 'Checking Language Variables are set ... '
	if [ $PLANG -eq 1 ] || [ $PLANGUAGE -eq 1 ];then
		echo "yes"
		echo "You may meet some error while building some"
		echo "packages,run following command to solve:"
		echo "unset LANG; unset LANGUAGE;"
	else
		echo "no"
		return 0
	fi
}

SHOW_HELP(){
	SHOW_VERSION
	echo ""
	echo "--------------------------"
	echo ""
	echo "Usage: configure [options]"
	echo ""
	echo "options:"
	echo "  --prefix=<prefix>  sets prefix dir (default: /ks/ramfs)"
	echo "  --target=<target>  sets build target (default: ARCH-ks-linux-gnu)"
	echo "                     ARCH=$(uname -m)"
	echo "  --cross=<cross>    sets cross complier build path (default: SYSROOT/cross)"
	echo "  --sysroot=<root>   sets sysroot dir (default: /tool)"
	echo "  --srcdir=<srcdir>  sets source dir which contains source (default: SYSROOT/src)"
	echo "  --tmpdir=<tmpdir>  sets temp dir to store temp files (default: SYSROOT/tmp)"
	echo "  --version          show version of configure"
	echo "  --help             show this help"
}

SHOW_VERSION(){
	echo "Kurasawa Configure Version: 1.0"
	echo "(C)Copyright Ruby Kurosawa 2000~2017"
	echo "This Script is licensed by Kurosawa"
	echo "Open Source License GPLv3-Compactible"
	echo "Version"
}

PARSE_ARGS(){
	TEMP=`getopt -o "" --long "prefix:,target:,sysroot:,srcdir:,tmpdir:,cross:,version,help" -n 'configure' -- "$@"`
	if [ $? != 0 ] ; then SHOW_HELP >&2 ; exit 1 ; fi

	eval set -- "$TEMP"
	while true ; do
			case "$1" in
					--prefix) PREFIX=$2; shift 2 ;; #KS
					--target) TARGET=$2; shift 2 ;; #LFS_TGT
					--cross)  CROSS=$2;  shift 2 ;; #CROSS
					--sysroot) SYSROOT=$2; shift 2 ;; #LIBPARENT
					--srcdir) SRCDIR=$2; shift 2 ;; #SOURCEROOT
					--tmpdir) TMPDIR=$2; shift 2 ;; #BUILDTMP
					--version) SHOW_VERSION; exit 0;; #VERSION
					--help) SHOW_HELP; exit 0;; #HELP
					--) shift ; break ;;
					*) SHOW_HELP; exit 1 ;;
			esac
	done
}

CONF_PREINIT(){
	PLANG=0
	PLANGUAGE=0
	if [ $LANG ];then PLANG=1; unset LANG; fi
	if [ $LANGUAGE ];then PLANGUAGE=1; unset LANGUAGE; fi
	PREFIX=/ks/ramfs
	TARGET=$(uname -m)-ks-linux-gnu
	SYSROOT=/tool
	CROSS=$SYSROOT/cross
	SRCDIR=$SYSROOT/src
	TMPDIR=$SYSROOT/tmp
}

CONF_CHECK_DIR(){
	NAME=$2
	VALUE=$3
	TRY=$1
	echo -n "Checking $NAME ..."
	if [ -d $VALUE ];then
		echo "yes"
		if [ "$TRY" = "try" ];then
			echo -n "try to read $NAME ..."
			ls $VALUE 2>/dev/null 1>/dev/null
			if [ $? -eq 0 ];then
				echo "done"
			else
				echo "fail"
				exit 1
			fi
			echo -n "try to write $NAME ..."
			touch $VALUE/a 2>/dev/null 1>/dev/null
			if [ $? -eq 0 ];then
				echo "done"
				rm $VALUE/a
			else
				echo "fail"
				exit 1
			fi
			return 0;
		fi
	else
		echo "no"
		if [ "$TRY" = "try" ];then
			echo -n "try to create $NAME ..."
			mkdir -p $VALUE 2>/dev/null 1>/dev/null
			if [ $? -eq 0 ];then
				echo "done"
				rm -rf $VALUE >/dev/null
				return 0;
			else
				echo "fail"
				exit 1
			fi
		else
			exit 1
		fi
		
	fi
}

CONF_DIR(){
	CONF_CHECK_DIR try PREFIX $PREFIX
	CONF_CHECK_DIR no-try SYSROOT $SYSROOT
	CONF_CHECK_DIR try CROSS $CROSS
	CONF_CHECK_DIR try SRCDIR $SRCDIR
	CONF_CHECK_DIR try TMPDIR $TMPDIR
	return 0;
}

CONF_OUTPUT_ENV(){
	echo -n "Creating envsetup.sh ... "
	export pwd="$(pwd)"
	sed -e "s!@pwd@!$pwd!g" -e "s/@TARGET@/$TARGET/g" envsetup.sh.in > envsetup.sh
	./src.in
	cat src>> envsetup.sh
	rm src
	chmod a+x envsetup.sh
	echo "done"
}

CONF_OUTPUT_MAKEFILE(){
	echo -n "Creating Makefile ... "
	./makefile.in
	echo "done"
}

CONF_WORK(){	
	CONF_OS
	CONF_ROOT
	CONF_SHELL_BASH
	CONF_SH_BASH
	CONF_DIR
	CONF_KPM
	CONF_YACC
	CONF_YACC_BISON
	CONF_AWK
	CONF_AWK_GAWK
	CONF_MAKEINFO
	CONF_PERL
	CONF_PATCH
	CONF_MAKE
	CONF_M4
	CONF_LDD
	CONF_GCC
	CONF_GXX
	CONF_LIBGCC
	CONF_LIBGCC64
	CONF_LANG
	CONF_OUTPUT_ENV
	CONF_OUTPUT_MAKEFILE
}

CONF_PREINIT
PARSE_ARGS "$@"
CONF_WORK


